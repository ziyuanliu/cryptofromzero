from mini_core.params import Params
from mini_core.utils import sha256d, serialize
from typing import Mapping, NamedTuple, Union, Iterable


class OutPoint(NamedTuple):
    """
    https://bitcoin.org/en/glossary/outpoint
    refers to a particular Output (https://bitcoin.org/en/glossary/output)
    OutPoint:
    - 32-byte TXID
    - 4-byte output index number (vout)
    """

    txid: str
    txout_idx: int


class SignatureScript(NamedTuple):
    """
    https://bitcoin.org/en/glossary/signature-script
    Data generated by a spender which is almost always used as variables to satisfy a pubkey script
    """

    unlock_sig: bytes
    unlock_pk: bytes


class TxIn(NamedTuple):
    """
    https://bitcoin.org/en/glossary/input
    fields:
    - outpoint: references to particular transaction output
    - signature: signature to satify spending generated by the user
    - sequence: the sequence number of the transaction: https://bitcoin.org/en/glossary/sequence-number
    """

    outpoint: Union[OutPoint, None]
    signature: SignatureScript
    sequence: int


class TxOut(NamedTuple):
    """
    https://bitcoin.org/en/glossary/output
    fields:
    - value: 0 or more minis
    - pubkey: public key of the owner of this txn
    """

    value: int
    pubkey: str


class UnspentTxOut(NamedTuple):
    """
    Unspent output, UnspentTXOutput :)
    """

    value: int
    pubkey: str

    # reference of the transaction this output belong to, easier to store the
    # values
    txid: str
    txout_idx: int

    # Did this transaction come out of the coinbase transaction
    is_coinbase: bool

    # The blockchain height the output was included in the chain
    height: int

    @property
    def outpoint(self):
        return OutPoint(self.txid, self.txout_idx)


class Transaction(NamedTuple):
    """
    A NamedTuple to represent a transaction
    """

    txins: Iterable[TxIn]
    txouts: Iterable[TxOut]

    # The block number or timestamp at which this transaction is unlocked.
    # < 500000000: Block number at which this transaction is unlocked.
    # >= 500000000: UNIX timestamp at which this transaction is unlocked.
    locktime: int = None

    @property
    def is_coinbase(self) -> bool:
        """
        coinbase: first transaction of the block
        """

        return len(self.txins) == 1 and self.txins[0].outpoint is None

    @classmethod
    def create_coinbase(cls, pay_to_addr, value, height):
        """
        Push current block height into unlock_sig so that this
        transaction's ID is unique relative to other coinbase txns.
        """

        signature = SignatureScript(
            unlock_sig=str(height).encode(),
            unlock_pk=None
        )
        first_txin = TxIn(outpoint=None, signature=signature, sequence=0)
        first_txout = TxOut(value=value, pubkey=pay_to_addr)

        return cls(txins=[first_txin], txouts=[first_txout])

    @property
    def id(self) -> str:
        return sha256d(serialize(self))

    def validate_basics(self, as_coinbase=False):
        if not self.txouts or (not self.txins and not as_coinbase):
            raise TxnValidationError('Missing txouts or txins')

        txn_len = len(serialize(self))
        if txn_len > Params.MAX_BLOCK_SERIALIZED_SIZE:
            raise TxnValidationError('Too Large: {txn_len}')

        spend_sum = sum(t.value for t in self.txouts)
        if spend_sum > Params.MAX_MONEY:
            raise TxnValidationError('Spend value too high: {spend_sum}')
